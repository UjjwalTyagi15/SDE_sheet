/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* l1,ListNode* l2){
      ListNode *dummy=new ListNode(0);
      ListNode* temp=dummy;
      while(l1&&l2){
        if(l1->val<=l2->val){
          temp->next=l1;
          l1=l1->next;
          temp=temp->next;
        }else{
          temp->next=l2;
          l2=l2->next;
          temp=temp->next;
        }
      }
      if(l1==NULL)temp->next=l2;
      else temp->next=l1;
      return dummy->next;
    }  


    ListNode* sortList(ListNode* head) {
        if(head==NULL || head->next==NULL)return head;
        ListNode*fast=head;
        ListNode*slow=head;
        while(fast->next && fast->next->next){
          fast=fast->next->next;
          slow=slow->next;
        }
        cout<<slow->val;
        fast=slow->next;
        slow->next=NULL;

        ListNode* l1=sortList(head);
        ListNode* l2=sortList(fast);

        return merge(l1,l2);


      }
};